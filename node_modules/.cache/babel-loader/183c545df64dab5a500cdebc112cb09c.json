{"ast":null,"code":"/*! @license Rematrix v0.3.0\n\n\tCopyright 2018 Julian Lloyd.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n*/\n\n/**\n * @module Rematrix\n */\n\n/**\n * Transformation matrices in the browser come in two flavors:\n *\n *  - `matrix` using 6 values (short)\n *  - `matrix3d` using 16 values (long)\n *\n * This utility follows this [conversion guide](https://goo.gl/EJlUQ1)\n * to expand short form matrices to their equivalent long form.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {array}\n */\nfunction format(source) {\n  if (source.constructor !== Array) {\n    throw new TypeError('Expected array.');\n  }\n\n  if (source.length === 16) {\n    return source;\n  }\n\n  if (source.length === 6) {\n    var matrix = identity();\n    matrix[0] = source[0];\n    matrix[1] = source[1];\n    matrix[4] = source[2];\n    matrix[5] = source[3];\n    matrix[12] = source[4];\n    matrix[13] = source[5];\n    return matrix;\n  }\n\n  throw new RangeError('Expected array with either 6 or 16 values.');\n}\n/**\n * Returns a matrix representing no transformation. The product of any matrix\n * multiplied by the identity matrix will be the original matrix.\n *\n * > **Tip:** Similar to how `5 * 1 === 5`, where `1` is the identity.\n *\n * @return {array}\n */\n\n\nfunction identity() {\n  var matrix = [];\n\n  for (var i = 0; i < 16; i++) {\n    i % 5 == 0 ? matrix.push(1) : matrix.push(0);\n  }\n\n  return matrix;\n}\n/**\n * Returns a matrix describing the inverse transformation of the source\n * matrix. The product of any matrix multiplied by its inverse will be the\n * identity matrix.\n *\n * > **Tip:** Similar to how `5 * (1/5) === 1`, where `1/5` is the inverse.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {array}\n */\n\n\nfunction inverse(source) {\n  var m = format(source);\n  var s0 = m[0] * m[5] - m[4] * m[1];\n  var s1 = m[0] * m[6] - m[4] * m[2];\n  var s2 = m[0] * m[7] - m[4] * m[3];\n  var s3 = m[1] * m[6] - m[5] * m[2];\n  var s4 = m[1] * m[7] - m[5] * m[3];\n  var s5 = m[2] * m[7] - m[6] * m[3];\n  var c5 = m[10] * m[15] - m[14] * m[11];\n  var c4 = m[9] * m[15] - m[13] * m[11];\n  var c3 = m[9] * m[14] - m[13] * m[10];\n  var c2 = m[8] * m[15] - m[12] * m[11];\n  var c1 = m[8] * m[14] - m[12] * m[10];\n  var c0 = m[8] * m[13] - m[12] * m[9];\n  var determinant = 1 / (s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0);\n\n  if (isNaN(determinant) || determinant === Infinity) {\n    throw new Error('Inverse determinant attempted to divide by zero.');\n  }\n\n  return [(m[5] * c5 - m[6] * c4 + m[7] * c3) * determinant, (-m[1] * c5 + m[2] * c4 - m[3] * c3) * determinant, (m[13] * s5 - m[14] * s4 + m[15] * s3) * determinant, (-m[9] * s5 + m[10] * s4 - m[11] * s3) * determinant, (-m[4] * c5 + m[6] * c2 - m[7] * c1) * determinant, (m[0] * c5 - m[2] * c2 + m[3] * c1) * determinant, (-m[12] * s5 + m[14] * s2 - m[15] * s1) * determinant, (m[8] * s5 - m[10] * s2 + m[11] * s1) * determinant, (m[4] * c4 - m[5] * c2 + m[7] * c0) * determinant, (-m[0] * c4 + m[1] * c2 - m[3] * c0) * determinant, (m[12] * s4 - m[13] * s2 + m[15] * s0) * determinant, (-m[8] * s4 + m[9] * s2 - m[11] * s0) * determinant, (-m[4] * c3 + m[5] * c1 - m[6] * c0) * determinant, (m[0] * c3 - m[1] * c1 + m[2] * c0) * determinant, (-m[12] * s3 + m[13] * s1 - m[14] * s0) * determinant, (m[8] * s3 - m[9] * s1 + m[10] * s0) * determinant];\n}\n/**\n * Returns a 4x4 matrix describing the combined transformations\n * of both arguments.\n *\n * > **Note:** Order is very important. For example, rotating 45°\n * along the Z-axis, followed by translating 500 pixels along the\n * Y-axis... is not the same as translating 500 pixels along the\n * Y-axis, followed by rotating 45° along on the Z-axis.\n *\n * @param  {array} m - Accepts both short and long form matrices.\n * @param  {array} x - Accepts both short and long form matrices.\n * @return {array}\n */\n\n\nfunction multiply(m, x) {\n  var fm = format(m);\n  var fx = format(x);\n  var product = [];\n\n  for (var i = 0; i < 4; i++) {\n    var row = [fm[i], fm[i + 4], fm[i + 8], fm[i + 12]];\n\n    for (var j = 0; j < 4; j++) {\n      var k = j * 4;\n      var col = [fx[k], fx[k + 1], fx[k + 2], fx[k + 3]];\n      var result = row[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];\n      product[i + k] = result;\n    }\n  }\n\n  return product;\n}\n/**\n * Attempts to return a 4x4 matrix describing the CSS transform\n * matrix passed in, but will return the identity matrix as a\n * fallback.\n *\n * > **Tip:** This method is used to convert a CSS matrix (retrieved as a\n * `string` from computed styles) to its equivalent array format.\n *\n * @param  {string} source - `matrix` or `matrix3d` CSS Transform value.\n * @return {array}\n */\n\n\nfunction parse(source) {\n  if (typeof source === 'string') {\n    var match = source.match(/matrix(3d)?\\(([^)]+)\\)/);\n\n    if (match) {\n      var raw = match[2].split(', ').map(parseFloat);\n      return format(raw);\n    }\n  }\n\n  return identity();\n}\n/**\n * Returns a 4x4 matrix describing Z-axis rotation.\n *\n * > **Tip:** This is just an alias for `Rematrix.rotateZ` for parity with CSS\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\n\n\nfunction rotate(angle) {\n  return rotateZ(angle);\n}\n/**\n * Returns a 4x4 matrix describing X-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\n\n\nfunction rotateX(angle) {\n  var theta = Math.PI / 180 * angle;\n  var matrix = identity();\n  matrix[5] = matrix[10] = Math.cos(theta);\n  matrix[6] = matrix[9] = Math.sin(theta);\n  matrix[9] *= -1;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Y-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\n\n\nfunction rotateY(angle) {\n  var theta = Math.PI / 180 * angle;\n  var matrix = identity();\n  matrix[0] = matrix[10] = Math.cos(theta);\n  matrix[2] = matrix[8] = Math.sin(theta);\n  matrix[2] *= -1;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Z-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\n\n\nfunction rotateZ(angle) {\n  var theta = Math.PI / 180 * angle;\n  var matrix = identity();\n  matrix[0] = matrix[5] = Math.cos(theta);\n  matrix[1] = matrix[4] = Math.sin(theta);\n  matrix[4] *= -1;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing 2D scaling. The first argument\n * is used for both X and Y-axis scaling, unless an optional\n * second argument is provided to explicitly define Y-axis scaling.\n *\n * @param  {number} scalar    - Decimal multiplier.\n * @param  {number} [scalarY] - Decimal multiplier.\n * @return {array}\n */\n\n\nfunction scale(scalar, scalarY) {\n  var matrix = identity();\n  matrix[0] = scalar;\n  matrix[5] = typeof scalarY === 'number' ? scalarY : scalar;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing X-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\n\n\nfunction scaleX(scalar) {\n  var matrix = identity();\n  matrix[0] = scalar;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Y-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\n\n\nfunction scaleY(scalar) {\n  var matrix = identity();\n  matrix[5] = scalar;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Z-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\n\n\nfunction scaleZ(scalar) {\n  var matrix = identity();\n  matrix[10] = scalar;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing shear. The first argument\n * defines X-axis shearing, and an optional second argument\n * defines Y-axis shearing.\n *\n * @param  {number} angleX   - Measured in degrees.\n * @param  {number} [angleY] - Measured in degrees.\n * @return {array}\n */\n\n\nfunction skew(angleX, angleY) {\n  var thetaX = Math.PI / 180 * angleX;\n  var matrix = identity();\n  matrix[4] = Math.tan(thetaX);\n\n  if (angleY) {\n    var thetaY = Math.PI / 180 * angleY;\n    matrix[1] = Math.tan(thetaY);\n  }\n\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing X-axis shear.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\n\n\nfunction skewX(angle) {\n  var theta = Math.PI / 180 * angle;\n  var matrix = identity();\n  matrix[4] = Math.tan(theta);\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Y-axis shear.\n *\n * @param  {number} angle - Measured in degrees\n * @return {array}\n */\n\n\nfunction skewY(angle) {\n  var theta = Math.PI / 180 * angle;\n  var matrix = identity();\n  matrix[1] = Math.tan(theta);\n  return matrix;\n}\n/**\n * Returns a CSS Transform property value equivalent to the source matrix.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {string}\n */\n\n\nfunction toString(source) {\n  return \"matrix3d(\" + format(source).join(', ') + \")\";\n}\n/**\n * Returns a 4x4 matrix describing 2D translation. The first\n * argument defines X-axis translation, and an optional second\n * argument defines Y-axis translation.\n *\n * @param  {number} distanceX   - Measured in pixels.\n * @param  {number} [distanceY] - Measured in pixels.\n * @return {array}\n */\n\n\nfunction translate(distanceX, distanceY) {\n  var matrix = identity();\n  matrix[12] = distanceX;\n\n  if (distanceY) {\n    matrix[13] = distanceY;\n  }\n\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing X-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\n\n\nfunction translateX(distance) {\n  var matrix = identity();\n  matrix[12] = distance;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Y-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\n\n\nfunction translateY(distance) {\n  var matrix = identity();\n  matrix[13] = distance;\n  return matrix;\n}\n/**\n * Returns a 4x4 matrix describing Z-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\n\n\nfunction translateZ(distance) {\n  var matrix = identity();\n  matrix[14] = distance;\n  return matrix;\n}\n\nexport { format, identity, inverse, multiply, parse, rotate, rotateX, rotateY, rotateZ, scale, scaleX, scaleY, scaleZ, skew, skewX, skewY, toString, translate, translateX, translateY, translateZ };","map":{"version":3,"sources":["C:/Users/pietr/Documents/Projects/upwork_friendkit_react/friendkit-1.1.3/friendkit-1.1.3-react/node_modules/rematrix/dist/rematrix.es.js"],"names":["format","source","constructor","Array","TypeError","length","matrix","identity","RangeError","i","push","inverse","m","s0","s1","s2","s3","s4","s5","c5","c4","c3","c2","c1","c0","determinant","isNaN","Infinity","Error","multiply","x","fm","fx","product","row","j","k","col","result","parse","match","raw","split","map","parseFloat","rotate","angle","rotateZ","rotateX","theta","Math","PI","cos","sin","rotateY","scale","scalar","scalarY","scaleX","scaleY","scaleZ","skew","angleX","angleY","thetaX","tan","thetaY","skewX","skewY","toString","join","translate","distanceX","distanceY","translateX","distance","translateY","translateZ"],"mappings":"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","sourcesContent":["/*! @license Rematrix v0.3.0\n\n\tCopyright 2018 Julian Lloyd.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n*/\n/**\n * @module Rematrix\n */\n\n/**\n * Transformation matrices in the browser come in two flavors:\n *\n *  - `matrix` using 6 values (short)\n *  - `matrix3d` using 16 values (long)\n *\n * This utility follows this [conversion guide](https://goo.gl/EJlUQ1)\n * to expand short form matrices to their equivalent long form.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {array}\n */\nfunction format(source) {\n\tif (source.constructor !== Array) {\n\t\tthrow new TypeError('Expected array.')\n\t}\n\tif (source.length === 16) {\n\t\treturn source\n\t}\n\tif (source.length === 6) {\n\t\tvar matrix = identity();\n\t\tmatrix[0] = source[0];\n\t\tmatrix[1] = source[1];\n\t\tmatrix[4] = source[2];\n\t\tmatrix[5] = source[3];\n\t\tmatrix[12] = source[4];\n\t\tmatrix[13] = source[5];\n\t\treturn matrix\n\t}\n\tthrow new RangeError('Expected array with either 6 or 16 values.')\n}\n\n/**\n * Returns a matrix representing no transformation. The product of any matrix\n * multiplied by the identity matrix will be the original matrix.\n *\n * > **Tip:** Similar to how `5 * 1 === 5`, where `1` is the identity.\n *\n * @return {array}\n */\nfunction identity() {\n\tvar matrix = [];\n\tfor (var i = 0; i < 16; i++) {\n\t\ti % 5 == 0 ? matrix.push(1) : matrix.push(0);\n\t}\n\treturn matrix\n}\n\n/**\n * Returns a matrix describing the inverse transformation of the source\n * matrix. The product of any matrix multiplied by its inverse will be the\n * identity matrix.\n *\n * > **Tip:** Similar to how `5 * (1/5) === 1`, where `1/5` is the inverse.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {array}\n */\nfunction inverse(source) {\n\tvar m = format(source);\n\n\tvar s0 = m[0] * m[5] - m[4] * m[1];\n\tvar s1 = m[0] * m[6] - m[4] * m[2];\n\tvar s2 = m[0] * m[7] - m[4] * m[3];\n\tvar s3 = m[1] * m[6] - m[5] * m[2];\n\tvar s4 = m[1] * m[7] - m[5] * m[3];\n\tvar s5 = m[2] * m[7] - m[6] * m[3];\n\n\tvar c5 = m[10] * m[15] - m[14] * m[11];\n\tvar c4 = m[9] * m[15] - m[13] * m[11];\n\tvar c3 = m[9] * m[14] - m[13] * m[10];\n\tvar c2 = m[8] * m[15] - m[12] * m[11];\n\tvar c1 = m[8] * m[14] - m[12] * m[10];\n\tvar c0 = m[8] * m[13] - m[12] * m[9];\n\n\tvar determinant = 1 / (s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0);\n\n\tif (isNaN(determinant) || determinant === Infinity) {\n\t\tthrow new Error('Inverse determinant attempted to divide by zero.')\n\t}\n\n\treturn [\n\t\t(m[5] * c5 - m[6] * c4 + m[7] * c3) * determinant,\n\t\t(-m[1] * c5 + m[2] * c4 - m[3] * c3) * determinant,\n\t\t(m[13] * s5 - m[14] * s4 + m[15] * s3) * determinant,\n\t\t(-m[9] * s5 + m[10] * s4 - m[11] * s3) * determinant,\n\n\t\t(-m[4] * c5 + m[6] * c2 - m[7] * c1) * determinant,\n\t\t(m[0] * c5 - m[2] * c2 + m[3] * c1) * determinant,\n\t\t(-m[12] * s5 + m[14] * s2 - m[15] * s1) * determinant,\n\t\t(m[8] * s5 - m[10] * s2 + m[11] * s1) * determinant,\n\n\t\t(m[4] * c4 - m[5] * c2 + m[7] * c0) * determinant,\n\t\t(-m[0] * c4 + m[1] * c2 - m[3] * c0) * determinant,\n\t\t(m[12] * s4 - m[13] * s2 + m[15] * s0) * determinant,\n\t\t(-m[8] * s4 + m[9] * s2 - m[11] * s0) * determinant,\n\n\t\t(-m[4] * c3 + m[5] * c1 - m[6] * c0) * determinant,\n\t\t(m[0] * c3 - m[1] * c1 + m[2] * c0) * determinant,\n\t\t(-m[12] * s3 + m[13] * s1 - m[14] * s0) * determinant,\n\t\t(m[8] * s3 - m[9] * s1 + m[10] * s0) * determinant\n\t]\n}\n\n/**\n * Returns a 4x4 matrix describing the combined transformations\n * of both arguments.\n *\n * > **Note:** Order is very important. For example, rotating 45°\n * along the Z-axis, followed by translating 500 pixels along the\n * Y-axis... is not the same as translating 500 pixels along the\n * Y-axis, followed by rotating 45° along on the Z-axis.\n *\n * @param  {array} m - Accepts both short and long form matrices.\n * @param  {array} x - Accepts both short and long form matrices.\n * @return {array}\n */\nfunction multiply(m, x) {\n\tvar fm = format(m);\n\tvar fx = format(x);\n\tvar product = [];\n\n\tfor (var i = 0; i < 4; i++) {\n\t\tvar row = [fm[i], fm[i + 4], fm[i + 8], fm[i + 12]];\n\t\tfor (var j = 0; j < 4; j++) {\n\t\t\tvar k = j * 4;\n\t\t\tvar col = [fx[k], fx[k + 1], fx[k + 2], fx[k + 3]];\n\t\t\tvar result =\n\t\t\t\trow[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];\n\n\t\t\tproduct[i + k] = result;\n\t\t}\n\t}\n\n\treturn product\n}\n\n/**\n * Attempts to return a 4x4 matrix describing the CSS transform\n * matrix passed in, but will return the identity matrix as a\n * fallback.\n *\n * > **Tip:** This method is used to convert a CSS matrix (retrieved as a\n * `string` from computed styles) to its equivalent array format.\n *\n * @param  {string} source - `matrix` or `matrix3d` CSS Transform value.\n * @return {array}\n */\nfunction parse(source) {\n\tif (typeof source === 'string') {\n\t\tvar match = source.match(/matrix(3d)?\\(([^)]+)\\)/);\n\t\tif (match) {\n\t\t\tvar raw = match[2].split(', ').map(parseFloat);\n\t\t\treturn format(raw)\n\t\t}\n\t}\n\treturn identity()\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis rotation.\n *\n * > **Tip:** This is just an alias for `Rematrix.rotateZ` for parity with CSS\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotate(angle) {\n\treturn rotateZ(angle)\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotateX(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[5] = matrix[10] = Math.cos(theta);\n\tmatrix[6] = matrix[9] = Math.sin(theta);\n\tmatrix[9] *= -1;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotateY(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[0] = matrix[10] = Math.cos(theta);\n\tmatrix[2] = matrix[8] = Math.sin(theta);\n\tmatrix[2] *= -1;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotateZ(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[0] = matrix[5] = Math.cos(theta);\n\tmatrix[1] = matrix[4] = Math.sin(theta);\n\tmatrix[4] *= -1;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing 2D scaling. The first argument\n * is used for both X and Y-axis scaling, unless an optional\n * second argument is provided to explicitly define Y-axis scaling.\n *\n * @param  {number} scalar    - Decimal multiplier.\n * @param  {number} [scalarY] - Decimal multiplier.\n * @return {array}\n */\nfunction scale(scalar, scalarY) {\n\tvar matrix = identity();\n\n\tmatrix[0] = scalar;\n\tmatrix[5] = typeof scalarY === 'number' ? scalarY : scalar;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\nfunction scaleX(scalar) {\n\tvar matrix = identity();\n\tmatrix[0] = scalar;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\nfunction scaleY(scalar) {\n\tvar matrix = identity();\n\tmatrix[5] = scalar;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\nfunction scaleZ(scalar) {\n\tvar matrix = identity();\n\tmatrix[10] = scalar;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing shear. The first argument\n * defines X-axis shearing, and an optional second argument\n * defines Y-axis shearing.\n *\n * @param  {number} angleX   - Measured in degrees.\n * @param  {number} [angleY] - Measured in degrees.\n * @return {array}\n */\nfunction skew(angleX, angleY) {\n\tvar thetaX = Math.PI / 180 * angleX;\n\tvar matrix = identity();\n\n\tmatrix[4] = Math.tan(thetaX);\n\n\tif (angleY) {\n\t\tvar thetaY = Math.PI / 180 * angleY;\n\t\tmatrix[1] = Math.tan(thetaY);\n\t}\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis shear.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction skewX(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[4] = Math.tan(theta);\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis shear.\n *\n * @param  {number} angle - Measured in degrees\n * @return {array}\n */\nfunction skewY(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[1] = Math.tan(theta);\n\n\treturn matrix\n}\n\n/**\n * Returns a CSS Transform property value equivalent to the source matrix.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {string}\n */\nfunction toString(source) {\n\treturn (\"matrix3d(\" + (format(source).join(', ')) + \")\")\n}\n\n/**\n * Returns a 4x4 matrix describing 2D translation. The first\n * argument defines X-axis translation, and an optional second\n * argument defines Y-axis translation.\n *\n * @param  {number} distanceX   - Measured in pixels.\n * @param  {number} [distanceY] - Measured in pixels.\n * @return {array}\n */\nfunction translate(distanceX, distanceY) {\n\tvar matrix = identity();\n\tmatrix[12] = distanceX;\n\n\tif (distanceY) {\n\t\tmatrix[13] = distanceY;\n\t}\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\nfunction translateX(distance) {\n\tvar matrix = identity();\n\tmatrix[12] = distance;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\nfunction translateY(distance) {\n\tvar matrix = identity();\n\tmatrix[13] = distance;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\nfunction translateZ(distance) {\n\tvar matrix = identity();\n\tmatrix[14] = distance;\n\treturn matrix\n}\n\nexport { format, identity, inverse, multiply, parse, rotate, rotateX, rotateY, rotateZ, scale, scaleX, scaleY, scaleZ, skew, skewX, skewY, toString, translate, translateX, translateY, translateZ };\n"]},"metadata":{},"sourceType":"module"}