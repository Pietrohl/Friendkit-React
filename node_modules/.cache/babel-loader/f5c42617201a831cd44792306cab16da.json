{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nconst Particle_1 = require(\"./Particle\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.limit = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    const container = this.container;\n    const options = container.options;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    let handled = false;\n\n    for (const particle of options.manualParticles) {\n      const pos = particle.position ? {\n        x: particle.position.x * container.canvas.size.width / 100,\n        y: particle.position.y * container.canvas.size.height / 100\n      } : undefined;\n      this.addParticle(pos, particle.options);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (!handled) {\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    if (options.infection.enable) {\n      for (let i = 0; i < options.infection.infections; i++) {\n        const notInfected = this.array.filter(p => p.infecter.infectionStage === undefined);\n        const infected = Utils_1.Utils.itemFromArray(notInfected);\n        infected.infecter.startInfection(0);\n      }\n    }\n\n    this.interactionManager.init();\n    container.noise.init();\n  }\n\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index, quantity) {\n    if (index >= 0 && index <= this.count) {\n      for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n        particle.destroy();\n      }\n    }\n  }\n\n  remove(particle) {\n    this.removeAt(this.array.indexOf(particle));\n  }\n\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.noise.update();\n\n    for (const particle of this.array) {\n      particle.move(delta);\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    this.interactionManager.externalInteract(delta);\n\n    for (const particle of this.container.particles.array) {\n      particle.update(delta);\n\n      if (!particle.destroyed && !particle.spawning) {\n        this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n  }\n\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.update(delta);\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.array) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n  }\n\n  push(nb, mouse, overrideOptions) {\n    const container = this.container;\n    const options = container.options;\n    const limit = options.particles.number.limit * container.density;\n    this.pushing = true;\n\n    if (limit > 0) {\n      const countToRemove = this.count + nb - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions) {\n    try {\n      const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n      this.array.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (_a) {\n      console.warn(\"error adding particle\");\n      return;\n    }\n  }\n\n  removeQuantity(quantity) {\n    this.removeAt(0, quantity);\n  }\n\n  getLinkFrequency(p1, p2) {\n    const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n    let res = this.linksFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.linksFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.trianglesFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.trianglesFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  setDensity() {\n    const options = this.container.options;\n    this.applyDensity(options.particles);\n  }\n\n  applyDensity(options) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n    const particlesCount = this.count;\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element;\n    const pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n  }\n\n}\n\nexports.Particles = Particles;","map":{"version":3,"sources":["C:/Users/pietr/Documents/Projects/upwork_friendkit_react/friendkit-1.1.3/friendkit-1.1.3-react/node_modules/tsparticles/dist/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","constructor","container","nextId","array","limit","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","count","length","init","options","handled","particle","manualParticles","pos","position","x","y","undefined","addParticle","plugin","plugins","particlesInitialization","i","particles","number","infection","enable","infections","notInfected","filter","p","infecter","infectionStage","infected","Utils","itemFromArray","startInfection","noise","redraw","clear","draw","factor","removeAt","index","quantity","splice","destroy","remove","indexOf","update","delta","particlesToDelete","move","destroyed","push","insert","Point","getPosition","externalInteract","spawning","particlesInteract","drawPlugin","nb","mouse","overrideOptions","density","pushing","countToRemove","removeQuantity","Particle","_a","console","warn","getLinkFrequency","p1","p2","key","Math","min","id","max","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3","setDensity","applyDensity","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","abs","densityOptions","element","pxRatio","retina","pixelRatio","area"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.nextId = 0;\n        this.array = [];\n        this.limit = 0;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = new Map();\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        const container = this.container;\n        const options = container.options;\n        this.linksFreq = new Map();\n        this.trianglesFreq = new Map();\n        let handled = false;\n        for (const particle of options.manualParticles) {\n            const pos = particle.position\n                ? {\n                    x: (particle.position.x * container.canvas.size.width) / 100,\n                    y: (particle.position.y * container.canvas.size.height) / 100,\n                }\n                : undefined;\n            this.addParticle(pos, particle.options);\n        }\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        if (options.infection.enable) {\n            for (let i = 0; i < options.infection.infections; i++) {\n                const notInfected = this.array.filter((p) => p.infecter.infectionStage === undefined);\n                const infected = Utils_1.Utils.itemFromArray(notInfected);\n                infected.infecter.startInfection(0);\n            }\n        }\n        this.interactionManager.init();\n        container.noise.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw({ value: 0, factor: 0 });\n    }\n    removeAt(index, quantity) {\n        if (index >= 0 && index <= this.count) {\n            for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                particle.destroy();\n            }\n        }\n    }\n    remove(particle) {\n        this.removeAt(this.array.indexOf(particle));\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.noise.update();\n        for (const particle of this.array) {\n            particle.move(delta);\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.externalInteract(delta);\n        for (const particle of this.container.particles.array) {\n            particle.update(delta);\n            if (!particle.destroyed && !particle.spawning) {\n                this.interactionManager.particlesInteract(particle, delta);\n            }\n        }\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.array) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    push(nb, mouse, overrideOptions) {\n        const container = this.container;\n        const options = container.options;\n        const limit = options.particles.number.limit * container.density;\n        this.pushing = true;\n        if (limit > 0) {\n            const countToRemove = this.count + nb - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions);\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions) {\n        try {\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions);\n            this.array.push(particle);\n            this.nextId++;\n            return particle;\n        }\n        catch (_a) {\n            console.warn(\"error adding particle\");\n            return;\n        }\n    }\n    removeQuantity(quantity) {\n        this.removeAt(0, quantity);\n    }\n    getLinkFrequency(p1, p2) {\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n        let res = this.linksFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.linksFreq.set(key, res);\n        }\n        return res;\n    }\n    getTriangleFrequency(p1, p2, p3) {\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n        if (id1 > id2) {\n            [id2, id1] = [id1, id2];\n        }\n        if (id2 > id3) {\n            [id3, id2] = [id2, id3];\n        }\n        if (id1 > id3) {\n            [id3, id1] = [id1, id3];\n        }\n        const key = `${id1}_${id2}_${id3}`;\n        let res = this.trianglesFreq.get(key);\n        if (res === undefined) {\n            res = Math.random();\n            this.trianglesFreq.set(key, res);\n        }\n        return res;\n    }\n    setDensity() {\n        const options = this.container.options;\n        this.applyDensity(options.particles);\n    }\n    applyDensity(options) {\n        var _a;\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n            return;\n        }\n        const numberOptions = options.number;\n        const densityFactor = this.initDensityFactor(numberOptions.density);\n        const optParticlesNumber = numberOptions.value;\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor;\n        const particlesCount = this.count;\n        this.limit = numberOptions.limit * densityFactor;\n        if (particlesCount < particlesNumber) {\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options);\n        }\n        else if (particlesCount > particlesNumber) {\n            this.removeQuantity(particlesCount - particlesNumber);\n        }\n    }\n    initDensityFactor(densityOptions) {\n        const container = this.container;\n        if (!container.canvas.element || !densityOptions.enable) {\n            return 1;\n        }\n        const canvas = container.canvas.element;\n        const pxRatio = container.retina.pixelRatio;\n        return (canvas.width * canvas.height) / (densityOptions.factor * pxRatio * pxRatio * densityOptions.area);\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}