{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Grabber = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Modes_1 = require(\"../../Enums/Modes\");\n\nclass Grabber {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    const container = this.container;\n    const mouse = container.interactivity.mouse;\n    const events = container.options.interactivity.events;\n\n    if (!(events.onHover.enable && mouse.position)) {\n      return false;\n    }\n\n    const hoverMode = events.onHover.mode;\n    return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n  }\n\n  reset() {}\n\n  interact() {\n    var _a;\n\n    const container = this.container;\n    const options = container.options;\n    const interactivity = options.interactivity;\n\n    if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n      const mousePos = container.interactivity.mouse.position;\n\n      if (mousePos === undefined) {\n        return;\n      }\n\n      const distance = container.retina.grabModeDistance;\n      const query = container.particles.quadTree.queryCircle(mousePos, distance);\n\n      for (const particle of query) {\n        const pos = particle.getPosition();\n        const pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);\n\n        if (pointDistance <= distance) {\n          const grabLineOptions = interactivity.modes.grab.links;\n          const lineOpacity = grabLineOptions.opacity;\n          const opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n\n          if (opacityLine > 0) {\n            const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n\n            if (!container.particles.grabLineColor) {\n              const linksOptions = container.options.interactivity.modes.grab.links;\n              container.particles.grabLineColor = Utils_1.ColorUtils.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            }\n\n            const colorLine = Utils_1.ColorUtils.getLinkColor(particle, undefined, container.particles.grabLineColor);\n\n            if (colorLine === undefined) {\n              return;\n            }\n\n            container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexports.Grabber = Grabber;","map":{"version":3,"sources":["C:/Users/pietr/Documents/Projects/upwork_friendkit_react/friendkit-1.1.3/friendkit-1.1.3-react/node_modules/tsparticles/dist/Interactions/External/Grabber.js"],"names":["Object","defineProperty","exports","value","Grabber","Utils_1","require","Modes_1","constructor","container","isEnabled","mouse","interactivity","events","options","onHover","enable","position","hoverMode","mode","Utils","isInArray","HoverMode","grab","reset","interact","_a","status","Constants","mouseMoveEvent","mousePos","undefined","distance","retina","grabModeDistance","query","particles","quadTree","queryCircle","particle","pos","getPosition","pointDistance","NumberUtils","getDistance","grabLineOptions","modes","links","lineOpacity","opacity","opacityLine","optColor","color","particlesOptions","grabLineColor","linksOptions","ColorUtils","getLinkRandomColor","blink","consent","colorLine","getLinkColor","canvas","drawGrabLine"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grabber = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Modes_1 = require(\"../../Enums/Modes\");\nclass Grabber {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.options.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab, hoverMode);\n    }\n    reset() {\n    }\n    interact() {\n        var _a;\n        const container = this.container;\n        const options = container.options;\n        const interactivity = options.interactivity;\n        if (interactivity.events.onHover.enable && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n            const mousePos = container.interactivity.mouse.position;\n            if (mousePos === undefined) {\n                return;\n            }\n            const distance = container.retina.grabModeDistance;\n            const query = container.particles.quadTree.queryCircle(mousePos, distance);\n            for (const particle of query) {\n                const pos = particle.getPosition();\n                const pointDistance = Utils_1.NumberUtils.getDistance(pos, mousePos);\n                if (pointDistance <= distance) {\n                    const grabLineOptions = interactivity.modes.grab.links;\n                    const lineOpacity = grabLineOptions.opacity;\n                    const opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n                    if (opacityLine > 0) {\n                        const optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : particle.particlesOptions.links.color;\n                        if (!container.particles.grabLineColor) {\n                            const linksOptions = container.options.interactivity.modes.grab.links;\n                            container.particles.grabLineColor = Utils_1.ColorUtils.getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                        }\n                        const colorLine = Utils_1.ColorUtils.getLinkColor(particle, undefined, container.particles.grabLineColor);\n                        if (colorLine === undefined) {\n                            return;\n                        }\n                        container.canvas.drawGrabLine(particle, colorLine, opacityLine, mousePos);\n                    }\n                }\n            }\n        }\n    }\n}\nexports.Grabber = Grabber;\n"]},"metadata":{},"sourceType":"script"}