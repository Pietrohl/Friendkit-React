{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\n\nfunction bounceHorizontal(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\") {\n    const velocity = data.particle.velocity.horizontal;\n    let bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0) {\n      const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.horizontal);\n      data.particle.velocity.horizontal *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      const minPos = data.offset.x + data.size;\n\n      if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n      } else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n      }\n    }\n  }\n}\n\nfunction bounceVertical(data) {\n  if (data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\") {\n    const velocity = data.particle.velocity.vertical;\n    let bounced = false;\n\n    if (data.direction === OutModeDirection_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0) {\n      const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.vertical);\n      data.particle.velocity.vertical *= -newVelocity;\n      bounced = true;\n    }\n\n    if (bounced) {\n      const minPos = data.offset.y + data.size;\n\n      if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n      } else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n      }\n    }\n  }\n}\n\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n\n      break;\n\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n\n      break;\n  }\n}\n\nclass Updater {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  update(delta) {\n    if (this.particle.destroyed) {\n      return;\n    }\n\n    this.updateLife(delta);\n\n    if (this.particle.destroyed || this.particle.spawning) {\n      return;\n    }\n\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateColor(delta);\n    this.updateStrokeColor(delta);\n    this.updateOutModes(delta);\n  }\n\n  updateLife(delta) {\n    const particle = this.particle;\n    let justSpawned = false;\n\n    if (particle.spawning) {\n      particle.lifeDelayTime += delta.value;\n\n      if (particle.lifeDelayTime >= particle.lifeDelay) {\n        justSpawned = true;\n        particle.spawning = false;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n      }\n    }\n\n    if (particle.lifeDuration === -1) {\n      return;\n    }\n\n    if (!particle.spawning) {\n      if (justSpawned) {\n        particle.lifeTime = 0;\n      } else {\n        particle.lifeTime += delta.value;\n      }\n\n      if (particle.lifeTime >= particle.lifeDuration) {\n        particle.lifeTime = 0;\n\n        if (particle.livesRemaining > 0) {\n          particle.livesRemaining--;\n        }\n\n        if (particle.livesRemaining === 0) {\n          particle.destroy();\n          return;\n        }\n\n        const canvasSize = this.container.canvas.size;\n        particle.position.x = Utils_1.NumberUtils.randomInRange(0, canvasSize.width);\n        particle.position.y = Utils_1.NumberUtils.randomInRange(0, canvasSize.height);\n        particle.spawning = true;\n        particle.lifeDelayTime = 0;\n        particle.lifeTime = 0;\n        const lifeOptions = particle.particlesOptions.life;\n        particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n        particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n      }\n    }\n  }\n\n  updateOpacity(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const opacityAnim = particle.particlesOptions.opacity.anim;\n    const minValue = opacityAnim.minimumValue;\n    const maxValue = particle.particlesOptions.opacity.value;\n\n    if (opacityAnim.enable) {\n      switch (particle.opacity.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.opacity.value >= maxValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n          } else {\n            particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.opacity.value <= minValue) {\n            particle.opacity.status = Enums_1.AnimationStatus.increasing;\n          } else {\n            particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n          }\n\n          break;\n      }\n\n      checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n      }\n    }\n  }\n\n  updateSize(delta) {\n    var _a, _b;\n\n    const container = this.container;\n    const particle = this.particle;\n    const sizeOpt = particle.particlesOptions.size;\n    const sizeAnim = sizeOpt.animation;\n    const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const maxValue = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n    const minValue = sizeAnim.minimumValue * container.retina.pixelRatio;\n\n    if (sizeAnim.enable) {\n      switch (particle.size.status) {\n        case Enums_1.AnimationStatus.increasing:\n          if (particle.size.value >= maxValue) {\n            particle.size.status = Enums_1.AnimationStatus.decreasing;\n          } else {\n            particle.size.value += sizeVelocity;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n          if (particle.size.value <= minValue) {\n            particle.size.status = Enums_1.AnimationStatus.increasing;\n          } else {\n            particle.size.value -= sizeVelocity;\n          }\n\n      }\n\n      checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n\n      if (!particle.destroyed) {\n        particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n      }\n    }\n  }\n\n  updateAngle(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const rotate = particle.particlesOptions.rotate;\n    const rotateAnimation = rotate.animation;\n    const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n\n    if (rotate.path) {\n      particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);\n    } else if (rotateAnimation.enable) {\n      switch (particle.rotate.status) {\n        case Enums_1.AnimationStatus.increasing:\n          particle.rotate.value += speed;\n\n          if (particle.rotate.value > max) {\n            particle.rotate.value -= max;\n          }\n\n          break;\n\n        case Enums_1.AnimationStatus.decreasing:\n        default:\n          particle.rotate.value -= speed;\n\n          if (particle.rotate.value < 0) {\n            particle.rotate.value += max;\n          }\n\n          break;\n      }\n    }\n  }\n\n  updateColor(delta) {\n    var _a;\n\n    const particle = this.particle;\n\n    if (particle.color.value === undefined) {\n      return;\n    }\n\n    if (particle.particlesOptions.color.animation.enable) {\n      particle.color.value.h += ((_a = particle.color.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n\n      if (particle.color.value.h > 360) {\n        particle.color.value.h -= 360;\n      }\n    }\n  }\n\n  updateStrokeColor(delta) {\n    var _a, _b;\n\n    const particle = this.particle;\n    const color = particle.stroke.color;\n\n    if (typeof color === \"string\" || color === undefined) {\n      return;\n    }\n\n    if (particle.strokeColor.value === undefined) {\n      return;\n    }\n\n    if (color.animation.enable) {\n      particle.strokeColor.value.h += ((_b = (_a = particle.strokeColor.velocity) !== null && _a !== void 0 ? _a : particle.color.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n\n      if (particle.strokeColor.value.h > 360) {\n        particle.strokeColor.value.h -= 360;\n      }\n    }\n  }\n\n  updateOutModes(delta) {\n    var _a, _b, _c, _d;\n\n    const outModes = this.particle.particlesOptions.move.outModes;\n    this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n    this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n    this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n    this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n  }\n\n  updateOutMode(delta, outMode, direction) {\n    const container = this.container;\n    const particle = this.particle;\n\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n        this.updateBounce(delta, direction, outMode);\n        break;\n\n      case Enums_1.OutMode.destroy:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle);\n        }\n\n        break;\n\n      case Enums_1.OutMode.out:\n        if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          this.fixOutOfCanvasPosition(direction);\n        }\n\n        break;\n\n      case Enums_1.OutMode.none:\n        this.bounceNone(direction);\n        break;\n    }\n  }\n\n  fixOutOfCanvasPosition(direction) {\n    const container = this.container;\n    const particle = this.particle;\n    const wrap = particle.particlesOptions.move.warp;\n    const canvasSize = container.canvas.size;\n    const newPos = {\n      bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    };\n    const sizeValue = particle.getRadius();\n    const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n\n    if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n      particle.position.x = newPos.left;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    } else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    }\n\n    if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.top;\n    } else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n\n      particle.position.y = newPos.bottom;\n    }\n  }\n\n  updateBounce(delta, direction, outMode) {\n    const container = this.container;\n    const particle = this.particle;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (handled) {\n      return;\n    }\n\n    const pos = particle.getPosition(),\n          offset = particle.offset,\n          size = particle.getRadius(),\n          bounds = Utils_1.Utils.calculateBounds(pos, size),\n          canvasSize = container.canvas.size;\n    bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n\n  bounceNone(direction) {\n    const particle = this.particle;\n\n    if (particle.particlesOptions.move.distance) {\n      return;\n    }\n\n    const gravityOptions = particle.particlesOptions.move.gravity;\n    const container = this.container;\n\n    if (!gravityOptions.enable) {\n      if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n\n      if (gravityOptions.acceleration >= 0 && position.y > container.canvas.size.height && direction === OutModeDirection_1.OutModeDirection.bottom || gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n\n}\n\nexports.Updater = Updater;","map":{"version":3,"sources":["C:/Users/pietr/Documents/Projects/upwork_friendkit_react/friendkit-1.1.3/friendkit-1.1.3-react/node_modules/tsparticles/dist/Core/Particle/Updater.js"],"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","OutModeDirection_1","bounceHorizontal","data","outMode","OutMode","bounce","velocity","particle","horizontal","bounced","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","NumberUtils","getValue","particlesOptions","minPos","offset","x","size","position","bounceVertical","vertical","bottom","height","top","y","checkDestroy","destroy","minValue","maxValue","DestroyType","max","min","constructor","container","update","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateColor","updateStrokeColor","updateOutModes","justSpawned","lifeDelayTime","lifeDelay","lifeTime","lifeDuration","livesRemaining","canvas","randomInRange","lifeOptions","life","delay","duration","_a","_b","opacityAnim","opacity","anim","minimumValue","enable","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","animation","sizeVelocity","sizeValue","retina","pixelRatio","rotate","rotateAnimation","speed","Math","PI","path","pathAngle","atan2","color","undefined","h","stroke","strokeColor","_c","_d","outModes","move","updateOutMode","default","updateBounce","Utils","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","nextBounds","calculateBounds","random","handled","plugin","plugins","particleBounce","pos","getPosition","distance","gravityOptions","gravity","acceleration"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst OutModeDirection_1 = require(\"../../Enums/Directions/OutModeDirection\");\nfunction bounceHorizontal(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\") {\n        const velocity = data.particle.velocity.horizontal;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.horizontal);\n            data.particle.velocity.horizontal *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.x + data.size;\n            if (data.bounds.right >= data.canvasSize.width) {\n                data.particle.position.x = data.canvasSize.width - minPos;\n            }\n            else if (data.bounds.left <= 0) {\n                data.particle.position.x = minPos;\n            }\n        }\n    }\n}\nfunction bounceVertical(data) {\n    if (data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\") {\n        const velocity = data.particle.velocity.vertical;\n        let bounced = false;\n        if ((data.direction === OutModeDirection_1.OutModeDirection.bottom &&\n            data.bounds.bottom >= data.canvasSize.height &&\n            velocity > 0) ||\n            (data.direction === OutModeDirection_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n            const newVelocity = Utils_1.NumberUtils.getValue(data.particle.particlesOptions.bounce.vertical);\n            data.particle.velocity.vertical *= -newVelocity;\n            bounced = true;\n        }\n        if (bounced) {\n            const minPos = data.offset.y + data.size;\n            if (data.bounds.bottom >= data.canvasSize.height) {\n                data.particle.position.y = data.canvasSize.height - minPos;\n            }\n            else if (data.bounds.top <= 0) {\n                data.particle.position.y = minPos;\n            }\n        }\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.lifeDelayTime += delta.value;\n            if (particle.lifeDelayTime >= particle.lifeDelay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n            }\n        }\n        if (particle.lifeDuration === -1) {\n            return;\n        }\n        if (!particle.spawning) {\n            if (justSpawned) {\n                particle.lifeTime = 0;\n            }\n            else {\n                particle.lifeTime += delta.value;\n            }\n            if (particle.lifeTime >= particle.lifeDuration) {\n                particle.lifeTime = 0;\n                if (particle.livesRemaining > 0) {\n                    particle.livesRemaining--;\n                }\n                if (particle.livesRemaining === 0) {\n                    particle.destroy();\n                    return;\n                }\n                const canvasSize = this.container.canvas.size;\n                particle.position.x = Utils_1.NumberUtils.randomInRange(0, canvasSize.width);\n                particle.position.y = Utils_1.NumberUtils.randomInRange(0, canvasSize.height);\n                particle.spawning = true;\n                particle.lifeDelayTime = 0;\n                particle.lifeTime = 0;\n                const lifeOptions = particle.particlesOptions.life;\n                particle.lifeDelay = Utils_1.NumberUtils.getValue(lifeOptions.delay) * 1000;\n                particle.lifeDuration = Utils_1.NumberUtils.getValue(lifeOptions.duration) * 1000;\n            }\n        }\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityAnim = particle.particlesOptions.opacity.anim;\n        const minValue = opacityAnim.minimumValue;\n        const maxValue = particle.particlesOptions.opacity.value;\n        if (opacityAnim.enable) {\n            switch (particle.opacity.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.opacity.value >= maxValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.opacity.value <= minValue) {\n                        particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                    }\n                    else {\n                        particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                    }\n                    break;\n            }\n            checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.opacity.value = Utils_1.NumberUtils.clamp(particle.opacity.value, minValue, maxValue);\n            }\n        }\n    }\n    updateSize(delta) {\n        var _a, _b;\n        const container = this.container;\n        const particle = this.particle;\n        const sizeOpt = particle.particlesOptions.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const maxValue = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n        const minValue = sizeAnim.minimumValue * container.retina.pixelRatio;\n        if (sizeAnim.enable) {\n            switch (particle.size.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    if (particle.size.value >= maxValue) {\n                        particle.size.status = Enums_1.AnimationStatus.decreasing;\n                    }\n                    else {\n                        particle.size.value += sizeVelocity;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                    if (particle.size.value <= minValue) {\n                        particle.size.status = Enums_1.AnimationStatus.increasing;\n                    }\n                    else {\n                        particle.size.value -= sizeVelocity;\n                    }\n            }\n            checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n            if (!particle.destroyed) {\n                particle.size.value = Utils_1.NumberUtils.clamp(particle.size.value, minValue, maxValue);\n            }\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.particlesOptions.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (rotate.path) {\n            particle.pathAngle = Math.atan2(particle.velocity.vertical, particle.velocity.horizontal);\n        }\n        else if (rotateAnimation.enable) {\n            switch (particle.rotate.status) {\n                case Enums_1.AnimationStatus.increasing:\n                    particle.rotate.value += speed;\n                    if (particle.rotate.value > max) {\n                        particle.rotate.value -= max;\n                    }\n                    break;\n                case Enums_1.AnimationStatus.decreasing:\n                default:\n                    particle.rotate.value -= speed;\n                    if (particle.rotate.value < 0) {\n                        particle.rotate.value += max;\n                    }\n                    break;\n            }\n        }\n    }\n    updateColor(delta) {\n        var _a;\n        const particle = this.particle;\n        if (particle.color.value === undefined) {\n            return;\n        }\n        if (particle.particlesOptions.color.animation.enable) {\n            particle.color.value.h += ((_a = particle.color.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n            if (particle.color.value.h > 360) {\n                particle.color.value.h -= 360;\n            }\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const color = particle.stroke.color;\n        if (typeof color === \"string\" || color === undefined) {\n            return;\n        }\n        if (particle.strokeColor.value === undefined) {\n            return;\n        }\n        if (color.animation.enable) {\n            particle.strokeColor.value.h +=\n                ((_b = (_a = particle.strokeColor.velocity) !== null && _a !== void 0 ? _a : particle.color.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n            if (particle.strokeColor.value.h > 360) {\n                particle.strokeColor.value.h -= 360;\n            }\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.particlesOptions.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, OutModeDirection_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, OutModeDirection_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, OutModeDirection_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, OutModeDirection_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.particlesOptions.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.Utils.calculateBounds(particle.position, sizeValue);\n        if (direction === OutModeDirection_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === OutModeDirection_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === OutModeDirection_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.Utils.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if (particle.particlesOptions.move.distance) {\n            return;\n        }\n        const gravityOptions = particle.particlesOptions.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.Utils.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((gravityOptions.acceleration >= 0 &&\n                position.y > container.canvas.size.height &&\n                direction === OutModeDirection_1.OutModeDirection.bottom) ||\n                (gravityOptions.acceleration < 0 && position.y < 0 && direction === OutModeDirection_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"]},"metadata":{},"sourceType":"script"}