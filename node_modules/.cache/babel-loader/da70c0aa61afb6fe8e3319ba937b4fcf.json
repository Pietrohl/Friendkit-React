{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberUtils = void 0;\n\nconst Directions_1 = require(\"../Enums/Directions\");\n\nclass NumberUtils {\n  static clamp(num, min, max) {\n    return Math.min(Math.max(num, min), max);\n  }\n\n  static mix(comp1, comp2, weight1, weight2) {\n    return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n  }\n\n  static randomInRange(r1, r2) {\n    const max = Math.max(r1, r2),\n          min = Math.min(r1, r2);\n    return Math.random() * (max - min) + min;\n  }\n\n  static getValue(options) {\n    const random = options.random;\n    const {\n      enable,\n      minimumValue\n    } = typeof random === \"boolean\" ? {\n      enable: random,\n      minimumValue: 0\n    } : random;\n    return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n  }\n\n  static getDistances(pointA, pointB) {\n    const dx = pointA.x - pointB.x;\n    const dy = pointA.y - pointB.y;\n    return {\n      dx: dx,\n      dy: dy,\n      distance: Math.sqrt(dx * dx + dy * dy)\n    };\n  }\n\n  static getDistance(pointA, pointB) {\n    return NumberUtils.getDistances(pointA, pointB).distance;\n  }\n\n  static getParticleBaseVelocity(particle) {\n    let velocityBase;\n\n    switch (particle.direction) {\n      case Directions_1.MoveDirection.top:\n        velocityBase = {\n          x: 0,\n          y: -1\n        };\n        break;\n\n      case Directions_1.MoveDirection.topRight:\n        velocityBase = {\n          x: 0.5,\n          y: -0.5\n        };\n        break;\n\n      case Directions_1.MoveDirection.right:\n        velocityBase = {\n          x: 1,\n          y: -0\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottomRight:\n        velocityBase = {\n          x: 0.5,\n          y: 0.5\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottom:\n        velocityBase = {\n          x: 0,\n          y: 1\n        };\n        break;\n\n      case Directions_1.MoveDirection.bottomLeft:\n        velocityBase = {\n          x: -0.5,\n          y: 1\n        };\n        break;\n\n      case Directions_1.MoveDirection.left:\n        velocityBase = {\n          x: -1,\n          y: 0\n        };\n        break;\n\n      case Directions_1.MoveDirection.topLeft:\n        velocityBase = {\n          x: -0.5,\n          y: -0.5\n        };\n        break;\n\n      default:\n        velocityBase = {\n          x: 0,\n          y: 0\n        };\n        break;\n    }\n\n    return velocityBase;\n  }\n\n  static rotateVelocity(velocity, angle) {\n    return {\n      horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n      vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n    };\n  }\n\n  static collisionVelocity(v1, v2, m1, m2) {\n    return {\n      horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n      vertical: v1.vertical\n    };\n  }\n\n}\n\nexports.NumberUtils = NumberUtils;","map":{"version":3,"sources":["C:/Users/pietr/Documents/Projects/upwork_friendkit_react/friendkit-1.1.3/friendkit-1.1.3-react/node_modules/tsparticles/dist/Utils/NumberUtils.js"],"names":["Object","defineProperty","exports","value","NumberUtils","Directions_1","require","clamp","num","min","max","Math","mix","comp1","comp2","weight1","weight2","floor","randomInRange","r1","r2","random","getValue","options","enable","minimumValue","getDistances","pointA","pointB","dx","x","dy","y","distance","sqrt","getDistance","getParticleBaseVelocity","particle","velocityBase","direction","MoveDirection","top","topRight","right","bottomRight","bottom","bottomLeft","left","topLeft","rotateVelocity","velocity","angle","horizontal","cos","vertical","sin","collisionVelocity","v1","v2","m1","m2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NumberUtils = void 0;\nconst Directions_1 = require(\"../Enums/Directions\");\nclass NumberUtils {\n    static clamp(num, min, max) {\n        return Math.min(Math.max(num, min), max);\n    }\n    static mix(comp1, comp2, weight1, weight2) {\n        return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n    }\n    static randomInRange(r1, r2) {\n        const max = Math.max(r1, r2), min = Math.min(r1, r2);\n        return Math.random() * (max - min) + min;\n    }\n    static getValue(options) {\n        const random = options.random;\n        const { enable, minimumValue } = typeof random === \"boolean\" ? { enable: random, minimumValue: 0 } : random;\n        return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n    }\n    static getDistances(pointA, pointB) {\n        const dx = pointA.x - pointB.x;\n        const dy = pointA.y - pointB.y;\n        return { dx: dx, dy: dy, distance: Math.sqrt(dx * dx + dy * dy) };\n    }\n    static getDistance(pointA, pointB) {\n        return NumberUtils.getDistances(pointA, pointB).distance;\n    }\n    static getParticleBaseVelocity(particle) {\n        let velocityBase;\n        switch (particle.direction) {\n            case Directions_1.MoveDirection.top:\n                velocityBase = { x: 0, y: -1 };\n                break;\n            case Directions_1.MoveDirection.topRight:\n                velocityBase = { x: 0.5, y: -0.5 };\n                break;\n            case Directions_1.MoveDirection.right:\n                velocityBase = { x: 1, y: -0 };\n                break;\n            case Directions_1.MoveDirection.bottomRight:\n                velocityBase = { x: 0.5, y: 0.5 };\n                break;\n            case Directions_1.MoveDirection.bottom:\n                velocityBase = { x: 0, y: 1 };\n                break;\n            case Directions_1.MoveDirection.bottomLeft:\n                velocityBase = { x: -0.5, y: 1 };\n                break;\n            case Directions_1.MoveDirection.left:\n                velocityBase = { x: -1, y: 0 };\n                break;\n            case Directions_1.MoveDirection.topLeft:\n                velocityBase = { x: -0.5, y: -0.5 };\n                break;\n            default:\n                velocityBase = { x: 0, y: 0 };\n                break;\n        }\n        return velocityBase;\n    }\n    static rotateVelocity(velocity, angle) {\n        return {\n            horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n            vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle),\n        };\n    }\n    static collisionVelocity(v1, v2, m1, m2) {\n        return {\n            horizontal: (v1.horizontal * (m1 - m2)) / (m1 + m2) + (v2.horizontal * 2 * m2) / (m1 + m2),\n            vertical: v1.vertical,\n        };\n    }\n}\nexports.NumberUtils = NumberUtils;\n"]},"metadata":{},"sourceType":"script"}